		    Introduction to Macros
		   ------------------------

Comb's true power and flexibility lie in the ability to allow you, the user, 
to construct your own macros.  A macro is a small program which allows you to
perform arbitrarily complicated operations without having to do much typing.
Macros are kept in separate ASCII files which can be editted with the default
editor (whatever you have the environment variable EDITOR set to). 
There are three types of macro files:

1) The global macros file (editted with the "dm g:").  This file
   resides in $COMB/.GMACROS and contains macros we think are of
   general use. It is readable by all users, but writable only by 
   the owner of comb.

2) A local macros file which resides in your home directory in 
   $HOME/.LMACROS and has your default permissions. You can edit it
   with "dm l:". Use this for macros which you use alot and aren't
   specific to a particular data set.

3) A stacks macros file associated with each stacks directory. This file 
   is used for macros specific to the data in that directory and is 
   editted with "dm st:". (For the background directory use "dm st:dt:").

When a macro is referred to, either on the command line or by a another macro,
comb will search in these macros files until it finds a match.  The order of
the search is directory 1 stacks macros (if directory 1 is open), directory 2
stacks macros (if directory 2 is open), local macros, and global macros. Comb
will stop searching at the first match and execute the macro.

A macro definition is simply a four-character macro name followed by
the string of comb command(s) which the name is to replace. For instance,

 cmap - cm,30,-30,-30,30 ir:1 st:1 vl:0,10 ci: \
	mlb:'This space for rent.'; wf ff:'map.fits'

is a rather simple example (note the use of  "\" to tell comb that the macro
continues on the next line). There MUST be at least 3 characters between the
end of the macro name and the beginning of its definition. (By convention, we
use [space][minus][space]).  Macros can be nested inside other macros.
An expanded macro definition is limited to 8192 characters. That is, the
maximum length definition of the "top" macro when all it's nested macros
are replaced by their definitions is 8192 characters.

                     Arguments to Macros
		    ---------------------

Macros, like commands, can have input arguments.  The symbols !0 through !9
represent macro arguments, where !0 refers to the first argument, !1 refers to
the second, etc. Macro arguments do not have to be numbers; they can also be
strings, expressions, global or string variables, lists, or ranges.  Consider
the macro definition

 gfit - c #1=!0; do !1 {rt #1;pl vl:;gf !2,!3 see:;c #1=#1+1}

and the call

 -> gfit,10,30,-4,4

The call to the macro "gfit" fits a Gaussian profile to each of the spectra in
stacks 10 through 30. First the global variable #1 is given the value of first
argument !0, i.e. the first stack number to retrieve.  This is necessary
because, unlike global variables #0 through #9, macro argument values cannot be
set in arithmetic expressions, e.g.  c !0=!0+1 is illegal.  The do loop is
executed 30 times (!1). Inside the loop, a Gaussian is fit between -4 and 4 
(!2 and !3) km/s. The flag "see:" causes "gf" to overlay the fitted profile on
the emission profile.  Finally, \#1 is incremented in order to fetch the next
stack on the next iteration of the loop.

